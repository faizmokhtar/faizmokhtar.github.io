[{"doc":"This page has not yet sprouted","title":"This page has not yet sprouted","hpath":"403","content":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","url":"https://notes.faizmokhtar.com/notes/403.html","relUrl":"notes/403.html"},{"doc":"Apa Khabar?","title":"Apa Khabar?","hpath":"root","content":"\nThis is a living documents. A [digital garden][1] of some sort. The contents here are mostly just notes that I jot down using [Dendron][2]. It also serve as my own public reference. Expect the contents here to be regularly updated as a I learned new things.\n\n[1]: https://maggieappleton.com/garden-history\n[2]: https://www.dendron.so/","url":"https://notes.faizmokhtar.com","relUrl":"/"},{"doc":"Tool","title":"Tool","hpath":"tool","content":"\n","url":"https://notes.faizmokhtar.com/notes/41bfd126-5186-433b-84ba-cd3b79f29c18.html","relUrl":"notes/41bfd126-5186-433b-84ba-cd3b79f29c18.html"},{"doc":"Xcode","title":"Xcode","hpath":"tool.xcode","content":"\n# Useful keyboard shortcuts\n\nFeatures | Keys |\n---------|----------|\n Easily navigate between current and previous file | CTRL+CMD+LEFT/RIGHT KEY |\nClear debug console | CMD + K |\n\n# To show duration of builds\n- Run the following in your terminal\n```bash\ndefaults write com.apple.dt.Xcode ShowBuildOperationDuration -bool YES\n```\n\n# Use iOS device beta with current Xcode version\n- Through symlinking (When you have multiple Xcodes)\n```bash\nsudo ln -s /Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/15.0 /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport\n```\nReferences: <https://gist.github.com/steipete/d9b44d8e9f341e81414e86d7ff8fb62d>\n- By downloading `DeviceSupport` from <https://github.com/iGhibli/iOS-DeviceSupport>\n\n# Carthage\n- To delete Carthage cache\n```bash\nrm -rf ~/Library/Caches/org.carthage.CarthageKit\n```","url":"https://notes.faizmokhtar.com/notes/9cdd3fac-1222-4ad2-bc4b-40e488cff588.html","relUrl":"notes/9cdd3fac-1222-4ad2-bc4b-40e488cff588.html"},{"doc":"Terraform","title":"Terraform","hpath":"tool.terraform","content":"\n# Basic Terraform workflow \n\n1. Create Terraform file. Eg: `main.tf`\n2. Define configuration\n3. Run `terraform init`\n4. Run `terraform plan` to see what Terraform wiill do\n5. Run `terraform apply` to actually create the instance\n\n# Terraform State\n\n- Records information about what infrastructure it created in `.tfstate`.\n- The state file `.tfstate` is a **Private API**\n    - Should nenver be edited or referenced directly\n- It should not be commited into git repo\n- The best way to manage shared storage for state file is through remote backend\n    - There's limitation\n        - It's a 2 step process for when creating & deleting\n        - `backend` block in Terraform does not allow us to use any variables or references\n- Be paranoid with how we store our state files. Always enable encryption and who we allow access to it.\n\n### Example of creating Terraform Backend\n- `.tfstate` is stored in S3 and DynamoDB is used for locking\n```bash\nprovider \"aws\" {\n    region = \"ap-southeast-1\"\n}\n\nresource \"aws_s3_bucket\" \"terraform_state\" {\n    bucket = \"toy-terraform-state-fm\"\n\n    # prevent accidental deletion of this s3 bucket\n    lifecycle {\n        prevent_destroy = true\n    }\n\n    versioning {\n        enabled = true\n    }\n\n    # enable server-side encryption by default\n    server_side_encryption_configuration {\n        rule {\n            apply_server_side_encryption_by_default {\n              sse_algorithm = \"AES256\"\n            }\n        }\n    }\n}\n\nresource \"aws_dynamodb_table\" \"terraform_locks\" {\n    name = \"toy-terraform-state-locks-fm\"\n    billing_mode = \"PAY_PER_REQUEST\"\n    hash_key = \"LockID\"\n\n    attribute {\n        name = \"LockID\"\n        type = \"S\"\n    }\n}\n\n# Example of using remote backend to avoid commiting `.tfstate`\n# It solved the following issues:\n# 1. manual error\n# 2. locking (with Dynamo DB)\n# 3. secrets (with S3 and IAM policies)\n\n# Run `terraform init` again to instruct terraform to store state file in S3 bucket\nterraform {\n  backend \"s3\" {\n      bucket = \"toy-terraform-state-fm\"\n      key = \"global/s3/terraform.tfstate\"\n      region = \"ap-southeast-1\"\n\n      dynamodb_table = \"toy-terraform-state-locks-fm\"\n      encrypt = true\n  }\n}\n```","url":"https://notes.faizmokhtar.com/notes/043c2a82-5512-4493-9eac-7752d9a12a7b.html","relUrl":"notes/043c2a82-5512-4493-9eac-7752d9a12a7b.html"},{"doc":"Nginx","title":"Nginx","hpath":"tool.nginx","content":"\n# What it is?\n- basically a web server that's now famously used for reverse proxy, HTTP cache, load balancing and among other else\n\n## Basic commands\n\n```bash\nnginx -s $COMMAND \n```\n- Replace `$COMMAND` with either of the following\n```bash\nstop # fast shutdown\nquit # graceful shutdown\nreload # reloading the configuration file\nreopen # reopening the log files\n```","url":"https://notes.faizmokhtar.com/notes/33d0f188-ab41-4acd-959b-d2fdbb31f546.html","relUrl":"notes/33d0f188-ab41-4acd-959b-d2fdbb31f546.html"},{"doc":"Jenkins","title":"Jenkins","hpath":"tool.jenkins","content":"\n## To install Jenkins with Docker\n\n1. login to Docker\n2. run the followings\n````bash\n$~ docker pull jenkins/jenkins:lts\n$~ docker run --detach --publish 8080:8080 --volume\njenkins_home:/var/jenkins_home --name jenkins jenkins/jenkins:lts\n$~ docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword\n````\n3. copy the password and open localhost:8080\n4. install suggested plugins\n\n## To install Jenkins on Mac (Useful for iOS CI/CD)\n\n1. Install it with `brew`\n```bash\nbrew install --cask homebrew/cask-versions/adoptopenjdk8\nbrew install jenkins-lts\n# run it in background\nbrew services start jenkins-lts\n```\n\n## Type of jobs in Jenkins\n\n1. freestyle job (most commonly used)\n2. pipeline job\n3. multi-configuration job\n4. github organization job\n5. multibranch job","url":"https://notes.faizmokhtar.com/notes/420ac6e2-a1db-40ea-8c0f-cfe93d8dca24.html","relUrl":"notes/420ac6e2-a1db-40ea-8c0f-cfe93d8dca24.html"},{"doc":"Git","title":"Git","hpath":"tool.git","content":"\n## Git Cheatsheet\n\n### Squashing 4 commits\n```bash\ngit checkout $BRANCH_NAME\ngit rebase -i $BRANCH_NAME~4 $BRANCH_NAME\n\n# at interactive screen\n# then choose the fixup for commit: 2/3/4\n\ngit push -u origin +$BRANCH_NAME\n```\n\n### Setting global default branch name to `main`\n\n```bash\ngit config --global init.defaultBranch main\n```\n\n### To checkout deleted local branch\n\n- Use `git reflog`\n```bash\ngit reflog\n```\n- Find the commit's SHA1 of the branch that you've deleted\n```bash\ngit checkout -b $SHA1\n```","url":"https://notes.faizmokhtar.com/notes/f6ceb740-2750-4244-950f-a384298bd226.html","relUrl":"notes/f6ceb740-2750-4244-950f-a384298bd226.html"},{"doc":"Fail2ban","title":"Fail2ban","hpath":"tool.fail2ban","content":"\n# What it is?\n- Intrusion prevention framework to prevent brute-force attack\n- Use to ban suscpicious inbound IP\n\n# To install on macOS\n```bash\nbrew install fail2ban\n# To have launchd start fail2ban now and restart at startup:\nsudo brew services start fail2ban\n```\n\n# Commands\n\n```bash\n# start fail2ban\nsudo fail2ban-client start\n# stop fail2ban\nsudo fail2ban-client stop\n# check status\nsudo fail2ban-client status\n```","url":"https://notes.faizmokhtar.com/notes/0130b156-5d8b-41ce-aeda-cef1ac586691.html","relUrl":"notes/0130b156-5d8b-41ce-aeda-cef1ac586691.html"},{"doc":"Docker","title":"Docker","hpath":"tool.docker","content":"\n# Docker Cheatsheet\n\n### To display Docker version & info\n```bash\ndocker --version\ndocker version\ndocker info\n```\n\n### To execute Docker image\n```bash\ndocker run $IMAGE_NAME\n```\n\n### To list all Docker images\n```bash\ndocker image ls\n```\n\n### To list Docker containers\n```bash\ndocker container ls # runnning\ndocker container ls --all # all, even one that's not running\ndocker container ls --aq # all in quiet mode\n```\n\n### To create image using current directory's Dockerfile\n```bash\ndocker build -t $CONTAINER_NAME .\n```\n\n### To run $CONTAINER_NAME and map port 4000 to 80\n```bash\ndocker run -p 4000:80 $CONTAINER_NAME\ndocker run -d -p 4000:80 $CONTAINER_NAME # Same thing, but in detached mode\n```\n\n### To display log entries\n```bash\ndocker container logs [ID]\n```\n\n### To remove container\n```bash\ndocker container rm --force [ID]\n```\n\n### To run interactive shell container\n```bash\ndocker run -it [IMAGE] sh\n```\n\n### To copy files from host into container (container must be running)\n- change will dissappear when container is stop and run again \n```bash\ndocker container cp [FILES] [DOCKER_ID]:[PATH_TO_COPY_TO]\n```\n### To explicitly pull an image from docker hub\n```bash\ndocker image pull [IMAGE]\n```\n### To search docker image by name\n```bash\ndocker images -f reference=\"[NAME]\"\n```\n\n--- \n\n# What is `Dockerfile`?\n- A script to package up an application\n- It outputs docker image\n\n- **FROM** - every image has to start from another image\n- **ENV** - to set env variables.use key-value pair\n- **WORKDIR** - creates a directory in container image filesystem and set it as current working directory\n- **COPY** - copies files or directories from local filestem (host) into the container image\n- **CMD** - specify command to run when container starts\n- building an image\n```bash\ndocker image build --tag [NAME] .\n```\n  - the `.` is the current directory. docker refers it as build context","url":"https://notes.faizmokhtar.com/notes/e4789c61-e98a-44c0-99b6-e996b0aa4a48.html","relUrl":"notes/e4789c61-e98a-44c0-99b6-e996b0aa4a48.html"},{"doc":"Bash","title":"Bash","hpath":"tool.bash","content":"\n# Bash Cookbook\n\n## To redirect output and error messages to different files\n\n```bash\nmyprogram 1> message.out 2> message.err\n```\n\n## To throw output away\n\nUse `/dev/null`. Useful when you don't wat to save the output. Eg;\n\n```bash\nnoisy > /dev/null\n```","url":"https://notes.faizmokhtar.com/notes/170dd2d7-f902-4e34-9881-55b55d05358a.html","relUrl":"notes/170dd2d7-f902-4e34-9881-55b55d05358a.html"},{"doc":"TIL","title":"TIL","hpath":"til","content":"\n# Things I don't understand yet\n\n- What is **market capitalization**?\n- How to use regex?\n- What is AndroidX and Android Jetpack?\n- What is hot and cold observables in Rx?","url":"https://notes.faizmokhtar.com/notes/7d00ea3a-985f-4e46-b90e-46abc296aaab.html","relUrl":"notes/7d00ea3a-985f-4e46-b90e-46abc296aaab.html"},{"doc":"Programming language","title":"Programming language","hpath":"pl","content":"\n","url":"https://notes.faizmokhtar.com/notes/a382231d-4947-4907-9347-8c44f4434ea2.html","relUrl":"notes/a382231d-4947-4907-9347-8c44f4434ea2.html"},{"doc":"Swift","title":"Swift","hpath":"pl.swift","content":"\n# Cheatsheet\n\n- To check if all array elements satisfy a certain condition\n\n```swift\nlet conditions = [true, true, false, true]\nlet isAllTrue = conditions.isAllSatisfy { $0 == true } // false\n```","url":"https://notes.faizmokhtar.com/notes/fa931ef7-fdfd-4ae8-a185-3911c958b82a.html","relUrl":"notes/fa931ef7-fdfd-4ae8-a185-3911c958b82a.html"},{"doc":"Combine","title":"Combine","hpath":"pl.swift.combine","content":"\n- declarative, reactive framework for processing asynchronous events over time\n- 3 important features in Combine\n  - publishers\n  - operators\n  - subscribers\n\n![Combine basic flow](/assets/images/2021-06-23-23-30-57.png)\n--- \n\n# Publishers\n- type that can emit values over time (eg. to subscriber)\n- can emit multiple events of these types\n  - output value of generic `Output` type\n  - successful completion\n  - completion with an error of the publisher's `Failure` type\n- come with error handling built in\n\n- `Publisher` protocol is generic over 2 types\n  - `Publisher.Output`: type of the output values of the publisher\n  - `Publisher.Failure`: type of error the publisher can throw if it fails\n- do not emit any values if there are no subscribers to receive the output\n\n- emits 2 kinds of events\n  - values @ elements\n  - completion event\n- can emit 0 or more values but only 1 completion event\n- once publisher emits completion event, it's finished and can no longer emit any values.\n\n---\n\n#Operators\n- methods declared on the `Publisher` protocol that return either the same or a new publisher\n- highly decoupled and composable. So it can be combie together to implement complex logic over the execution of a single subscription\n- always have input and output.\n  - input; known as **upstream**\n  - output; known as **downstream**\n\ncollect()\n- collect values into array\n- provide an easier way to transform stream of individual values from a publisher into array of those values\n\nmap(_:)\n- similar as Swift's standard `map` except it operates on values emitted from a publisher\n\ntryMap(_:)\n- counterpart try operator that will take a closure that can throw an error\n- will emit error downstream\n\nflatmap()\n- use to flatten multiple upstream publishers into a single downstream publisher\n- basically flattens the output from all received publishers into a single publisher\n- to help manage memory footprint we can specify `.flatMap(maxPublishers:)`\n- default number of upstream publishers is `.unlimited`\n\nreplaceNil(with:)\n- receive optional value and replace `nil` with the value specified\n- basically replace `nil` value with non-`nil` value\n\nreplaceEmpty(with:)\n- insert a value if a publisher completes without emitting a value\n\n---\n\n#Subscribers\n- every subbscription ends with a subscriber\n- generally do something with the emitted output or completion events\n- Combine provide 2 built-in subscribers:\n  - **sink**; allows us to provide closure with our code that will receive output values and completions\n  - **assign**; allows us to bind the resulting output to some property on our data model or on a UI control\n- we can create custom subscriber\n\n---\n\n#Unanswered questions?\n\n1. What is backpressure management?\n2. What is `Future`?\n3. How to create `Future`?\n3. What is `Subject`?\n4. What is Type erasure?","url":"https://notes.faizmokhtar.com/notes/mQd3_nJM_vaiFgMITkYYb.html","relUrl":"notes/mQd3_nJM_vaiFgMITkYYb.html"},{"doc":"Go","title":"Go","hpath":"pl.go","content":"\n# Tips\n\n- printing a struct with the `%+v` format “verb” prints the struct’s field names as well as values.\n","url":"https://notes.faizmokhtar.com/notes/3e666371-9e21-48ff-b2c0-62fdadf2cd39.html","relUrl":"notes/3e666371-9e21-48ff-b2c0-62fdadf2cd39.html"},{"doc":"iOS","title":"iOS","hpath":"ios","content":"\n","url":"https://notes.faizmokhtar.com/notes/f88d532b-8515-4037-a145-0ade53bc972c.html","relUrl":"notes/f88d532b-8515-4037-a145-0ade53bc972c.html"},{"doc":"Tool","title":"Tool","hpath":"ios.tool","content":"\n# Cocoapods Cheatsheet\n\n# To install a pod from a specific branch\n\n```ruby\npod 'RxCoreLocation', :git => 'https://github.com/RxSwiftCommunity/RxCoreLocation.git', :branch => 'master'\n```","url":"https://notes.faizmokhtar.com/notes/8bf1139e-8c86-48ed-9f0d-e110c54948b7.html","relUrl":"notes/8bf1139e-8c86-48ed-9f0d-e110c54948b7.html"},{"doc":"Rxswift","title":"Rxswift","hpath":"ios.rxswift","content":"\n## What is `BehaviorRelay`?\n\n- It's a wrapper around `BehaviorSubject`. Means that it wraps around `BehaviorSubject` while maintaining it's replay behavior\n- It can only accept values. It can't return `error` or `completed` event\n- They are guaranteed to never terminate\n    - Suitable to handle UI events\n\n[RxRelay Github link](https://github.com/ReactiveX/RxSwift/blob/main/RxRelay/BehaviorRelay.swift)\n\n---\n## Extending class to provide Rx behavior\n\n- To make it available through `rx` property\n- Use `ReactiveCompatible` protocol\n- Example by extending `KeychainWorker` class with `ReactiveCompatible`\n```swift\nimport Foundation\nimport KeychainAccess\nimport RxSwift\n\nclass KeychainWorker {\n    \n    let keychain: Keychain\n\n    init(identifier: String) {\n        self.keychain = Keychain(service: identifier)\n    }\n    \n    func set(key: String, value: String) throws {\n        try keychain.set(value, key: key)\n    }\n\n    func getValue(for key: String) throws -> String? {\n        try keychain.get(key)\n    }\n    \n    func remove(key: String) throws {\n        try keychain.remove(key)\n    }\n    \n    func removeAll() throws {\n        try keychain.removeAll()\n    }\n}\n\nextension KeychainWorker: ReactiveCompatible {}\n\nextension Reactive where Base: KeychainWorker {\n    func set(key: String, value: String) -> Observable<Void> {\n        return Observable<Void>.create({ observer in\n            do {\n                try self.base.set(key: key, value: value)\n                observer.onCompleted()\n            } catch let error {\n                observer.onError(error)\n            }\n            \n            return Disposables.create()\n        })\n    }\n    \n    func getValue(for key: String) -> Observable<String?> {\n        return Observable<String?>.create({ observer in\n            do {\n                let value = try self.base.getValue(for: key)\n                observer.onNext(value)\n                observer.onCompleted()\n            } catch let error {\n                observer.onError(error)\n            }\n            \n            return Disposables.create()\n        })\n    }\n    \n    func remove(key: String) -> Observable<Void> {\n        return Observable<Void>.create({ observer in\n            do {\n                try self.base.remove(key: key)\n                observer.onCompleted()\n            } catch let error {\n                observer.onError(error)\n            }\n            \n            return Disposables.create()\n        })\n    }\n    \n    func removeAll() -> Observable<Void> {\n        return Observable<Void>.create({ observer in\n            do {\n                try self.base.removeAll()\n                observer.onCompleted()\n            } catch let error {\n                observer.onError(error)\n            }\n            \n            return Disposables.create()\n        })\n    }\n}\n```\n---\n## RxSwift and delegate pattern\n\n- Checkout `Reactive.swift`, `DelegateProxy.swift` & `DelegateProxyType.swift` files\n- `DelegateProxy` object creates a fake delegate object which will proxy all the data received into dedicated observables\n    - create a proxy to drive all data from the delegate to observables\n    - map 1-to-1 relationship, single protocol will correspond to a single observable that returns the given data\n\n### Delegate pattern without return type\n- Use `sentMessage(Selector)` or `methodInvoked(Selector)`\n\n### Delegate pattern with return type\n- Wrapping a delegate with return type are very hard task\n    - Delegate methods with a return type are not meant for observation, but customization of the behavior.\n    - Defining an automatic default value that would work in any case is a non-trivial task.\n    - Best solution is to forward the call to a classic implementation of the delegate\n- Use `public static func installForwardDelegate(_ forwardDelegate: AnyObject, retainDelegate: Bool, onProxyForObject object: AnyObject) -> Disposable`\n\n### Code examples on how to wrap 3rd party framework that uses delegate\n\n- `ASAuthorizationController+Rx.swift`\n```swift\n@available(iOS 13.0, *)\nextension ASAuthorizationController: HasDelegate {}\n\n@available(iOS 13.0, *)\nclass RxASAuthorizationControllerDelegateProxy: DelegateProxy<ASAuthorizationController, ASAuthorizationControllerDelegate>, DelegateProxyType, ASAuthorizationControllerDelegate {\n    \n    weak public private(set) var authorizationController: ASAuthorizationController?\n    \n    public init(authorizationController: ParentObject) {\n        self.authorizationController = authorizationController\n        super.init(parentObject: authorizationController, delegateProxy: RxASAuthorizationControllerDelegateProxy.self)\n    }\n    \n    static func registerKnownImplementations() {\n        register(make: { RxASAuthorizationControllerDelegateProxy(authorizationController: $0) })\n    }\n}\n\n@available(iOS 13.0, *)\nextension Reactive where Base: ASAuthorizationController {\n    var delegate: DelegateProxy<ASAuthorizationController, ASAuthorizationControllerDelegate> {\n        RxASAuthorizationControllerDelegateProxy.proxy(for: base)\n    }\n    \n    var didCompleteWithAuthorization: Observable<ASAuthorization> {\n        delegate.methodInvoked(#selector(ASAuthorizationControllerDelegate.authorizationController(controller:didCompleteWithAuthorization:)))\n            .map { parameters in\n                return parameters[1] as! ASAuthorization\n            }\n    }\n}\n```\n\n- `GidSignIn+Rx.swift`\n```swift\nclass RxGIDSignInDelegateProxy: DelegateProxy<GIDSignIn, GIDSignInDelegate>,GIDSignInDelegate  {\n    public weak private(set) var gidSignIn: GIDSignIn?\n    var signInSubject = PublishSubject<GIDGoogleUser>()\n    var disconnectSubject = PublishSubject<GIDGoogleUser>()\n    \n    init(gidSignIn: ParentObject) {\n        self.gidSignIn = gidSignIn\n        super.init(parentObject: gidSignIn, delegateProxy: RxGIDSignInDelegateProxy.self)\n    }\n    \n    func sign(_ signIn: GIDSignIn!, didSignInFor user: GIDGoogleUser!, withError error: Error!) {\n        if let u = user {\n            signInSubject.on(.next(u))\n        } else if let e = error {\n            signInSubject.on(.error(e))\n        }\n        _forwardToDelegate?.sign(signIn, didSignInFor:user, withError: error)\n    }\n    \n    public func sign(_ signIn: GIDSignIn!, didDisconnectWith user: GIDGoogleUser!, withError error: Error!) {\n        if let u = user {\n            self.disconnectSubject.on(.next(u))\n        } else if let e = error {\n            self.disconnectSubject.on(.error(e))\n        }\n        self._forwardToDelegate?.sign(signIn, didDisconnectWith: user, withError: error)\n    }\n    \n    deinit {\n        signInSubject.on(.completed)\n        disconnectSubject.on(.completed)\n    }\n}\n\nextension RxGIDSignInDelegateProxy :DelegateProxyType {\n    static func registerKnownImplementations() {\n        register { RxGIDSignInDelegateProxy(gidSignIn: $0) }\n    }\n    \n    static func currentDelegate(for object: GIDSignIn) -> GIDSignInDelegate? {\n        return object.delegate\n    }\n    \n    static func setCurrentDelegate(_ delegate: GIDSignInDelegate?, to object: GIDSignIn) {\n        object.delegate = delegate\n    }\n}\n\nextension Reactive where Base: GIDSignIn {\n    public var delegate: DelegateProxy<GIDSignIn, GIDSignInDelegate> {\n        return self.gidSignInDelegate\n    }\n    \n    var signIn: Observable<GIDGoogleUser> {\n        let proxy = self.gidSignInDelegate\n        proxy.signInSubject = PublishSubject<GIDGoogleUser>()\n        return proxy.signInSubject\n            .asObservable()\n            .do(onSubscribed: {\n                proxy.gidSignIn?.signIn()\n            })\n            .take(1)\n            .asObservable()\n    }\n        \n    var signOut: Observable<GIDGoogleUser> {\n        let proxy = self.gidSignInDelegate\n        proxy.signInSubject = PublishSubject<GIDGoogleUser>()\n        return proxy.disconnectSubject\n            .asObservable()\n            .do(onSubscribed: {\n                proxy.gidSignIn?.signOut()\n            })\n            .take(1)\n            .asObservable()\n    }\n    \n    private var gidSignInDelegate: RxGIDSignInDelegateProxy {\n        return RxGIDSignInDelegateProxy.proxy(for: base)\n    }\n}\n\n\nextension RxGIDSignInDelegateProxy :DelegateProxyType {\n    static func registerKnownImplementations() {\n        register { RxGIDSignInDelegateProxy(gidSignIn: $0) }\n    }\n    \n    static func currentDelegate(for object: GIDSignIn) -> GIDSignInDelegate? {\n        return object.delegate\n    }\n    \n    static func setCurrentDelegate(_ delegate: GIDSignInDelegate?, to object: GIDSignIn) {\n        object.delegate = delegate\n    }\n}\n\nextension Reactive where Base: GIDSignIn {\n    public var delegate: DelegateProxy<GIDSignIn, GIDSignInDelegate> {\n        return self.gidSignInDelegate\n    }\n    \n    var signIn: Observable<GIDGoogleUser> {\n        let proxy = self.gidSignInDelegate\n        proxy.signInSubject = PublishSubject<GIDGoogleUser>()\n        return proxy.signInSubject\n            .asObservable()\n            .do(onSubscribed: {\n                proxy.gidSignIn?.signIn()\n            })\n            .take(1)\n            .asObservable()\n    }\n        \n    var signOut: Observable<GIDGoogleUser> {\n        let proxy = self.gidSignInDelegate\n        proxy.signInSubject = PublishSubject<GIDGoogleUser>()\n        return proxy.disconnectSubject\n            .asObservable()\n            .do(onSubscribed: {\n                proxy.gidSignIn?.signOut()\n            })\n            .take(1)\n            .asObservable()\n    }\n    \n    private var gidSignInDelegate: RxGIDSignInDelegateProxy {\n        return RxGIDSignInDelegateProxy.proxy(for: base)\n    }\n}\n```\n---\n## On `map` and `flatMap` difference\n\n- https://stackoverflow.com/questions/49627902/rxswift-map-and-flatmap-difference","url":"https://notes.faizmokhtar.com/notes/98b3c847-9ce7-4cf4-9c51-288a3f0f4698.html","relUrl":"notes/98b3c847-9ce7-4cf4-9c51-288a3f0f4698.html"},{"doc":"Apis","title":"Apis","hpath":"ios.apis","content":"\n","url":"https://notes.faizmokhtar.com/notes/97b2c382-1ce0-42ed-87e9-236dd0eddeaa.html","relUrl":"notes/97b2c382-1ce0-42ed-87e9-236dd0eddeaa.html"},{"doc":"App Search APIs","title":"App Search APIs","hpath":"ios.apis.appsearch","content":"\n- Available since iOS 9\n- Allows 3rd party devs make their content available throught Spotlight\n- Broken into 3 different APIs that provides different results\n    - `NSUserActivity`\n    - Core Spotlight\n    - Web markup","url":"https://notes.faizmokhtar.com/notes/b4078b01-19a4-4e58-ba88-1485d50d963e.html","relUrl":"notes/b4078b01-19a4-4e58-ba88-1485d50d963e.html"},{"doc":"Core Spotlight","title":"Core Spotlight","hpath":"ios.apis.appsearch.corespotlight","content":"\n","url":"https://notes.faizmokhtar.com/notes/4b2ed972-c3be-4d45-9f36-94a238a26034.html","relUrl":"notes/4b2ed972-c3be-4d45-9f36-94a238a26034.html"},{"doc":"Goals","title":"Goals","hpath":"goals","content":"\n","url":"https://notes.faizmokhtar.com/notes/VfmNRvYTxAtJTC6Bujn9P.html","relUrl":"notes/VfmNRvYTxAtJTC6Bujn9P.html"},{"doc":"Cloud","title":"Cloud","hpath":"cloud","content":"\n","url":"https://notes.faizmokhtar.com/notes/16c8d227-9d77-45da-95bd-97aaccb693bb.html","relUrl":"notes/16c8d227-9d77-45da-95bd-97aaccb693bb.html"},{"doc":"Aws","title":"Aws","hpath":"cloud.aws","content":"\n## EC2 Instance Types\n\n- General purpose\n- Compute optimized\n- Memory optimized\n- Accelerated computing\n- Storage optimized\n## EC2 Pricing\n\n- On-demand\n    - Ideal for short-term irregular workloads that cannot be interrupted\n    - Pay for only the compute time\n- Reserved instance\n- Spot instancce\n    - Ideal for workloads with flexible start and end times\n    - Do not require commitment to a consistent amount of compute usage\n- Dedicated host\n    - The most expensive\n- Amazon EC2 saving plans\n    - Ideal for workloads that involve a consistent amount of compute usage over a 1-3 year term\n\n## Amazon EC2 Auto Scaling\n- If you wanted the scaling process to happen automatically\n- Enable us to automatically add or remove EC2 instances in response to demand\n- Dynamic scaling\n    - Responds to changing demannd\n- Predictive scaling\n    - Automatically schedules the right number of EC2 instannces based on predictive demand\n\n## Type of load balancers:\n\n- Application Load Balancer (ALB)\n    - suits for load balancing HTTP & HTTPS traffic\n    - operates at application layer\n- Network Load Balancer (NLB)\n    - suits for load balancing TCP, UDP & TLS traffic\n    - operates at both application layer & transport layer (L4)\n- Classic Load Balancer (CLB)\n    - \"legacy\" load balancer\n    - can handle HTTP, HTTPS, TCP & TLS traffic but with far fewer features than ALB & NLB\n    - operates at both application layer & transport layer\n\n# Useful resources\n\n- [AWS in plain English](https://expeditedsecurity.com/aws-in-plain-english/)","url":"https://notes.faizmokhtar.com/notes/71ddbf7d-3ee4-44d0-8673-6ec3654919ce.html","relUrl":"notes/71ddbf7d-3ee4-44d0-8673-6ec3654919ce.html"},{"doc":"Books","title":"Books","hpath":"books","content":"\n# \n\n# Wishlist\n\n- Everyday Go: [Link to website](https://gumroad.com/l/everyday-golang)","url":"https://notes.faizmokhtar.com/notes/slxJMk2SXNWew3YQ8Y2U3.html","relUrl":"notes/slxJMk2SXNWew3YQ8Y2U3.html"},{"doc":"Android","title":"Android","hpath":"android","content":"\n# Why do I learn it?\n\n- Not to be an expert on it. I learn it to better understand the difference between iOS and Android development so that I can understand it and communicate easily with my Android team mates.\n- I can learn the tooling for Android CI/CD \n\n# Main learning repository:\n- [faizmokhtar/android-learnings](https://github.com/faizmokhtar/android-learnings)\n    - multiple toy projects to understand how to build Android apps\n\n# Notes\n- `Activity` is a term used for a page or a screen\n- Activity Lifecycle\n    - Every Activity has a parent Activity class that it extends\n    - `override fun onCreate(savedInstanceState: Bundle?)`\n        - The callback that we will used the most. Similar like iOS `viewDidLoad` \n        - Usually where we setup the UI of our Activity here by calling `setContentView` method\n        - Only called once in its lifecycle unless the Activity is created again\n    - `override fun onRestart()`\n        - When Activity restarts, this is called immediately before `onStart`\n    - `override fun onStart()`\n        - When the Activity first comes into view\n        - The first of the visible lifecycles methods\n    - `override fun onRestoreInstanceState(savedInstanceState: Bundle?)`\n        - If the state has been saved using `onSaveInstanceState(outState:Bundle?)`, it will called this method after `onStart()`\n    - `override fun onResume()`\n        - Run as the final stage of creating an Activity for the first time & also when the app has been backgrounded & then is brought into foreground\n        - Upon completion, view is ready to be used\n    - `override fun onSaveInstanceState(outState: Bundle?)`\n        - to save the state of the activity\n    - `override fun onPause()`\n        - Called when Activity starts to be backgrounded or another dialog or Activity comes into the foreground\n    - `override fun onStop()`\n        - Called when Activity is hidden. Either by being backgrounded or another Activity is being launched on top\n    - `override fun onDestroy()`\n        - Called by the system to kill the Activity when system resources are low\n        - Or when `finish()` is called explicitly on Activity\n        - Or when Activity is being killed by the users themselves\n\n# Useful links\n- [How to store secret keys in Android](https://guides.codepath.com/android/Storing-Secret-Keys-in-Android)\n- [Using ViewBinding to avoid findViewById dance](https://developer.android.com/topic/libraries/view-binding)\n- ","url":"https://notes.faizmokhtar.com/notes/c855cd15-a923-4f27-bfac-301954e7f7a5.html","relUrl":"notes/c855cd15-a923-4f27-bfac-301954e7f7a5.html"},{"doc":"Changelog","title":"Changelog","hpath":"root.changelog","content":"","url":"https://notes.faizmokhtar.com/notes/changelog.html","relUrl":"notes/changelog.html"}]
